name: "Build Linux App"
on:
  workflow_dispatch:
    # This allows manual triggering from the GitHub Actions tab

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Wails Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libglib2.0-dev \
            libglib2.0-bin \
            libgdk-pixbuf2.0-dev \
            libgirepository1.0-dev \
            libcairo2-dev \
            libpango1.0-dev \
            libatk1.0-dev \
            libatk-bridge2.0-dev \
            libx11-dev \
            libxcomposite-dev \
            libxcursor-dev \
            libxdamage-dev \
            libxext-dev \
            libxfixes-dev \
            libxi-dev \
            libxrandr-dev \
            libxrender-dev \
            libxtst-dev \
            libnss3 \
            libasound2t64 \
            upx-ucl
          # Create symlink for webkit2gtk-4.0 compatibility
          sudo ln -sf /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.1.pc /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.0.pc

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          check-latest: true
          cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Wails
        run: |
          go install github.com/wailsapp/wails/v2/cmd/wails@latest

      # - name: Install frontend dependencies
      #   working-directory: frontend
      #   run: |
      #     pnpm install --no-frozen-lockfile

      - name: Clean build directory
        run: |
          rm -rf build/bin/linux
          mkdir -p build/bin/linux

      - name: Build Wails application (amd64)
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"
        run: |
          wails build -platform linux/amd64 -upx
          mkdir -p build/bin/linux
          if [ -f "build/bin/TridUI" ]; then
            cp "build/bin/TridUI" "build/bin/linux/TridUI-linux-amd64"
            chmod +x "build/bin/linux/TridUI-linux-amd64"
          fi

      - name: Install AppImage dependencies
        run: |
          wget -O appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool
          sudo mv appimagetool /usr/local/bin/

      - name: Create AppImage
        run: |
          mkdir -p TridUI.AppDir/usr/bin
          mkdir -p TridUI.AppDir/usr/share/applications
          mkdir -p TridUI.AppDir/usr/share/icons/hicolor/256x256/apps
          
          # Copy binary
          cp build/bin/linux/TridUI-linux-amd64 TridUI.AppDir/usr/bin/TridUI
          
          # Create desktop file
          cat > TridUI.AppDir/usr/share/applications/TridUI.desktop << 'EOF'
          [Desktop Entry]
          Name=TrID UI
          Exec=TridUI
          Icon=TridUI
          Type=Application
          Categories=Utility;
          Comment=File type identification tool
          Terminal=false
          EOF
          
          # Copy icon (use icon from repo root)
          if [ -f "icon.png" ]; then
            cp icon.png TridUI.AppDir/usr/share/icons/hicolor/256x256/apps/TridUI.png
            cp icon.png TridUI.AppDir/TridUI.png
          elif [ -f "build/appicon.png" ]; then
            cp build/appicon.png TridUI.AppDir/usr/share/icons/hicolor/256x256/apps/TridUI.png
            cp build/appicon.png TridUI.AppDir/TridUI.png
          fi
          
          # Create AppRun
          cat > TridUI.AppDir/AppRun << 'EOF'
          #!/bin/bash
          SELF=$(readlink -f "$0")
          HERE=${SELF%/*}
          export PATH="${HERE}/usr/bin/:${PATH}"
          export LD_LIBRARY_PATH="${HERE}/usr/lib/:${LD_LIBRARY_PATH}"
          exec "${HERE}/usr/bin/TridUI" "$@"
          EOF
          chmod +x TridUI.AppDir/AppRun
          
          # Copy desktop file to root
          cp TridUI.AppDir/usr/share/applications/TridUI.desktop TridUI.AppDir/
          
          # Build AppImage
          ARCH=x86_64 appimagetool TridUI.AppDir build/bin/linux/TridUI-linux-amd64.AppImage

      - name: Install .deb packaging tools
        run: |
          sudo apt-get install -y dpkg-dev fakeroot

      - name: Create .deb package
        run: |
          mkdir -p tridui-deb/DEBIAN
          mkdir -p tridui-deb/usr/bin
          mkdir -p tridui-deb/usr/share/applications
          mkdir -p tridui-deb/usr/share/icons/hicolor/256x256/apps
          
          # Copy binary
          cp build/bin/linux/TridUI-linux-amd64 tridui-deb/usr/bin/tridui
          chmod +x tridui-deb/usr/bin/tridui
          
          # Create desktop file
          cat > tridui-deb/usr/share/applications/tridui.desktop << 'EOF'
          [Desktop Entry]
          Name=TrID UI
          Exec=/usr/bin/tridui
          Icon=tridui
          Type=Application
          Categories=Utility;
          Comment=File type identification tool
          Terminal=false
          EOF
          
          # Copy icon
          if [ -f "icon.png" ]; then
            cp icon.png tridui-deb/usr/share/icons/hicolor/256x256/apps/tridui.png
          elif [ -f "build/appicon.png" ]; then
            cp build/appicon.png tridui-deb/usr/share/icons/hicolor/256x256/apps/tridui.png
          fi
          
          # Create control file
          cat > tridui-deb/DEBIAN/control << 'EOF'
          Package: tridui
          Version: 1.1.0
          Section: utils
          Priority: optional
          Architecture: amd64
          Maintainer: JMcrafter26 <your-email@example.com>
          Description: TrID UI - File Type Identification Tool
           A desktop application for identifying file types based on binary signatures.
           Features drag-and-drop interface, multi-language support, and automatic updates.
          EOF
          
          # Build .deb
          fakeroot dpkg-deb --build tridui-deb build/bin/linux/TridUI-linux-amd64.deb

      # ARM64 build disabled - requires cross-compilation toolchain
      # To build for ARM64, use a native ARM64 runner or set up cross-compilation

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: TridUI-linux
          path: build/bin/linux/*
          retention-days: 7
