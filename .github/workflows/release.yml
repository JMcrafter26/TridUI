name: "Release Build"
on:
  release:
    types: [created]
  workflow_dispatch:
    # This allows manual triggering from the GitHub Actions tab

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          check-latest: true
          cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Get pnpm store directory
        shell: pwsh
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $env:GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install UPX
        run: |
          choco install upx -y

      - name: Install NSIS
        run: |
          choco install nsis -y
          # Add NSIS to PATH for current session
          $nsisPath = "C:\Program Files (x86)\NSIS"
          echo "$nsisPath" >> $env:GITHUB_PATH

      - name: Install Wails
        run: |
          go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Clean build directory
        run: |
          if (Test-Path "build\bin\windows") {
            Remove-Item -Recurse -Force "build\bin\windows"
          }
          New-Item -ItemType Directory -Force -Path "build\bin\windows"

      - name: Build Wails application (amd64)
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"
        run: |
          wails build -platform windows/amd64 -upx -nsis -clean
          New-Item -ItemType Directory -Force -Path "build\bin\windows"
          # Move the binary
          if (Test-Path "build\bin\TridUI.exe") {
            Move-Item -Force "build\bin\TridUI.exe" "build\bin\windows\TridUI-win-amd64.exe"
          }
          # Move the installer
          if (Test-Path "build\bin\TridUI-amd64-installer.exe") {
            Move-Item -Force "build\bin\TridUI-amd64-installer.exe" "build\bin\windows\TridUI-win-amd64-installer.exe"
          }

      - name: Build Wails application (arm64)
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"
        run: |
          wails build -platform windows/arm64 -nsis
          New-Item -ItemType Directory -Force -Path "build\bin\windows"
          # Move the binary
          if (Test-Path "build\bin\TridUI.exe") {
            Move-Item -Force "build\bin\TridUI.exe" "build\bin\windows\TridUI-win-arm64.exe"
          }
          # Move the installer
          if (Test-Path "build\bin\TridUI-arm64-installer.exe") {
            Move-Item -Force "build\bin\TridUI-arm64-installer.exe" "build\bin\windows\TridUI-win-arm64-installer.exe"
          }

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: TridUI-windows
          path: build/bin/windows/*
          retention-days: 90

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          check-latest: true
          cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Wails
        run: |
          go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Clean build directory
        run: |
          rm -rf build/bin/darwin
          mkdir -p build/bin/darwin

      - name: Build Wails application (universal)
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"
        run: |
          wails build -platform darwin/universal -clean
          mkdir -p build/bin/darwin
          if [ -d "build/bin/TridUI.app" ]; then
            cp -R build/bin/TridUI.app build/bin/darwin/TridUI.app
          fi

      - name: Install create-dmg
        run: |
          brew install create-dmg

      - name: Create DMG
        run: |
          # Use icon from build dir or fall back to repo root
          ICON_PATH="build/appicon.png"
          if [ ! -f "$ICON_PATH" ]; then
            ICON_PATH="icon.png"
          fi
          
          create-dmg \
            --volname "TrID UI" \
            --window-pos 200 120 \
            --window-size 600 400 \
            --icon-size 100 \
            --icon "TridUI.app" 175 190 \
            --hide-extension "TridUI.app" \
            --app-drop-link 425 190 \
            "build/bin/darwin/TridUI-macOS.dmg" \
            "build/bin/darwin/TridUI.app" || true
          # Fallback to zip if DMG creation fails
          if [ ! -f "build/bin/darwin/TridUI-macOS.dmg" ]; then
            cd build/bin/darwin && zip -r TridUI-macOS.zip TridUI.app && cd ../../..
          fi

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: TridUI-macos
          path: build/bin/darwin/*
          retention-days: 90

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Wails Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libglib2.0-dev \
            libglib2.0-bin \
            libgdk-pixbuf2.0-dev \
            libgirepository1.0-dev \
            libcairo2-dev \
            libpango1.0-dev \
            libatk1.0-dev \
            libatk-bridge2.0-dev \
            libx11-dev \
            libxcomposite-dev \
            libxcursor-dev \
            libxdamage-dev \
            libxext-dev \
            libxfixes-dev \
            libxi-dev \
            libxrandr-dev \
            libxrender-dev \
            libxtst-dev \
            libnss3 \
            libasound2t64 \
            upx-ucl
          # Create symlink for webkit2gtk-4.0 compatibility
          sudo ln -sf /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.1.pc /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.0.pc

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          check-latest: true
          cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Wails
        run: |
          go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Clean build directory
        run: |
          rm -rf build/bin/linux
          mkdir -p build/bin/linux

      - name: Build Wails application (amd64)
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"
        run: |
          wails build -platform linux/amd64 -upx
          mkdir -p build/bin/linux
          if [ -f "build/bin/TridUI" ]; then
            cp "build/bin/TridUI" "build/bin/linux/TridUI-linux-amd64"
            chmod +x "build/bin/linux/TridUI-linux-amd64"
          fi

      - name: Install AppImage dependencies
        run: |
          sudo apt-get install -y libfuse2 file
          wget -O appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool
          ./appimagetool --appimage-extract
          sudo mv squashfs-root /opt/appimagetool
          sudo ln -s /opt/appimagetool/AppRun /usr/local/bin/appimagetool

      - name: Create AppImage
        run: |
          mkdir -p TridUI.AppDir/usr/bin
          mkdir -p TridUI.AppDir/usr/share/applications
          mkdir -p TridUI.AppDir/usr/share/icons/hicolor/256x256/apps
          
          cp build/bin/linux/TridUI-linux-amd64 TridUI.AppDir/usr/bin/TridUI
          
          cat > TridUI.AppDir/usr/share/applications/TridUI.desktop << 'EOF'
          [Desktop Entry]
          Name=TrID UI
          Exec=TridUI
          Icon=TridUI
          Type=Application
          Categories=Utility;
          Comment=File type identification tool
          Terminal=false
          EOF
          
          if [ -f "icon.png" ]; then
            cp icon.png TridUI.AppDir/usr/share/icons/hicolor/256x256/apps/TridUI.png
            cp icon.png TridUI.AppDir/TridUI.png
          elif [ -f "build/appicon.png" ]; then
            cp build/appicon.png TridUI.AppDir/usr/share/icons/hicolor/256x256/apps/TridUI.png
            cp build/appicon.png TridUI.AppDir/TridUI.png
          fi
          
          cat > TridUI.AppDir/AppRun << 'EOF'
          #!/bin/bash
          SELF=$(readlink -f "$0")
          HERE=${SELF%/*}
          export PATH="${HERE}/usr/bin/:${PATH}"
          export LD_LIBRARY_PATH="${HERE}/usr/lib/:${LD_LIBRARY_PATH}"
          exec "${HERE}/usr/bin/TridUI" "$@"
          EOF
          chmod +x TridUI.AppDir/AppRun
          
          cp TridUI.AppDir/usr/share/applications/TridUI.desktop TridUI.AppDir/
          
          ARCH=x86_64 appimagetool --no-appstream TridUI.AppDir build/bin/linux/TridUI-linux-amd64.AppImage

      - name: Install .deb packaging tools
        run: |
          sudo apt-get install -y dpkg-dev fakeroot

      - name: Create .deb package
        run: |
          mkdir -p tridui-deb/DEBIAN
          mkdir -p tridui-deb/usr/bin
          mkdir -p tridui-deb/usr/share/applications
          mkdir -p tridui-deb/usr/share/icons/hicolor/256x256/apps
          
          cp build/bin/linux/TridUI-linux-amd64 tridui-deb/usr/bin/tridui
          chmod +x tridui-deb/usr/bin/tridui
          
          cat > tridui-deb/usr/share/applications/tridui.desktop << 'EOF'
          [Desktop Entry]
          Name=TrID UI
          Exec=/usr/bin/tridui
          Icon=tridui
          Type=Application
          Categories=Utility;
          Comment=File type identification tool
          Terminal=false
          EOF
          
          if [ -f "icon.png" ]; then
            cp icon.png tridui-deb/usr/share/icons/hicolor/256x256/apps/tridui.png
          elif [ -f "build/appicon.png" ]; then
            cp build/appicon.png tridui-deb/usr/share/icons/hicolor/256x256/apps/tridui.png
          fi
          
          cat > tridui-deb/DEBIAN/control << 'EOF'
          Package: tridui
          Version: 1.1.0
          Section: utils
          Priority: optional
          Architecture: amd64
          Maintainer: JMcrafter26 <your-email@example.com>
          Description: TrID UI - File Type Identification Tool
           A desktop application for identifying file types based on binary signatures.
           Features drag-and-drop interface, multi-language support, and automatic updates.
          EOF
          
          fakeroot dpkg-deb --build tridui-deb build/bin/linux/TridUI-linux-amd64.deb

      # ARM64 build disabled - requires cross-compilation toolchain
      # To build for ARM64, use a native ARM64 runner or set up cross-compilation

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: TridUI-linux
          path: build/bin/linux/*
          retention-days: 90
